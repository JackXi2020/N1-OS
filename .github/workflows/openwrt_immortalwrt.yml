#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build ARMv8 immortalwrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: [started]
    
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  SWAP: false
  DIY_SH: immo_diy.sh
  TZ: Asia/Shanghai
  FILE_NAME: openwrt_armvirt
  PRODUCT_NAME: ARMv8-im


jobs:
  build:
    runs-on: Ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "CPU性能：7763 > 8370C > 8171M > 8272CL > E5系列"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # docker rmi `docker images -q`
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo -E apt -y purge azure-cli ghc* zulu* texlive* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo -E apt update
        sudo -E apt -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
        sudo -E apt-get -qq install libfuse-dev
        sudo -E apt -y autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt clean && sudo -E apt autoclean
        sudo timedatectl set-timezone "$TZ"
        echo "status=success" >> ${GITHUB_OUTPUT}
        df -Th

    - name: Create Swap
      if: env.SWAP == 'true'
      run: |
        sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile
        free -h | grep -i swap

    - name: Create simulated physical disk
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /workdir
        sudo mount /dev/github/runner /workdir
        sudo chown -R runner.runner /workdir
        df -Th

    - name: Clone source code
      working-directory: /workdir
      if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H<br/>")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
        echo "KERNEL_VER=$(cat $GITHUB_WORKSPACE/KernelVersion)" >> $GITHUB_ENV
        echo "VER=R$(date +%Y.%m.%d)" >> $GITHUB_ENV

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a && ./scripts/feeds install -a

    - name: File Diy Patch
      run: |
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH

    - name: Generate configuration file
      run: |
        cd openwrt
        rm -f ./.config*
        touch ./.config

        #
        # ================  合并后的 .config（基于原 YAML + config.txt 的 Wi‑Fi 与精简插件，保留 passwall & passwall2 & openclash，去除 ssr-plus） ================
        #

        # 目标平台（保留 workflow 原始的 ARMv8 通用设置）
        cat >> .config <<EOF
        CONFIG_TARGET_armsr=y
        CONFIG_TARGET_armsr_armv8=y
        CONFIG_TARGET_armsr_armv8_DEVICE_generic=y
        CONFIG_TARGET_ARCH_PACKAGES="aarch64_generic"
        CONFIG_DEFAULT_TARGET_OPTIMIZATION="-Os -pipe -mcpu=generic"
        CONFIG_CPU_TYPE="generic"
        EOF

        # 镜像设置（减少输出物）
        cat >> .config <<EOF
        CONFIG_TARGET_ROOTFS_TARGZ=y
        CONFIG_TARGET_ROOTFS_INITRAMFS=n
        CONFIG_TARGET_ROOTFS_CPIOGZ=n
        CONFIG_TARGET_ROOTFS_EXT4FS=n
        CONFIG_TARGET_ROOTFS_SQUASHFS=n
        EOF

        # 加快编译
        cat >> .config <<EOF
        CONFIG_DEVEL=y
        CONFIG_CCACHE=y
        EOF

        # USB 基础支持（保留常用项）
        cat >> .config <<EOF
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb-dwc2=y
        CONFIG_PACKAGE_kmod-usb-dwc3=y
        CONFIG_PACKAGE_kmod-usb-ehci=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        CONFIG_PACKAGE_kmod-usb-storage-extras=y
        CONFIG_PACKAGE_kmod-usb-storage-uas=y
        CONFIG_PACKAGE_kmod-usb-xhci-hcd=y
        CONFIG_PACKAGE_kmod-usb-ohci=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        # 兼容 config.txt 的 usb2/usb-hid/net
        CONFIG_PACKAGE_kmod-usb-hid=y
        CONFIG_PACKAGE_kmod-usb-net=y
        EOF

        # IPv6 支持（参考两份配置：保留 ip6tables 及 helper）
        cat >> .config <<EOF
        CONFIG_PACKAGE_ip6tables=y
        CONFIG_PACKAGE_ip6tables-extra=y
        CONFIG_PACKAGE_ip6tables-mod-nat=y
        CONFIG_PACKAGE_ipv6helper=y
        CONFIG_PACKAGE_6in4=y
        EOF

        # Wi‑Fi 驱动：从 config.txt 拷贝的 Broadcom 支持与工具（针对需要 brcmfmac 的设备）
        cat >> .config <<EOF
        CONFIG_PACKAGE_kmod-brcmfmac=y
        CONFIG_BRCMFMAC_SDIO=y
        CONFIG_PACKAGE_kmod-brcmutil=y
        CONFIG_PACKAGE_kmod-cfg80211=y
        CONFIG_PACKAGE_kmod-mac80211=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_wpa-cli=y
        CONFIG_PACKAGE_wpad-basic=y
        CONFIG_PACKAGE_iw=y
        EOF

        # LuCI / 网络相关插件（参考 config.txt 并保留 passwall、passwall2、openclash）
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-app-passwall=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=y
        CONFIG_PACKAGE_luci-app-passwall2=y
        CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Client=y
        CONFIG_PACKAGE_luci-app-passwall2_INCLUDE_Shadowsocks_Rust_Server=y
        CONFIG_PACKAGE_luci-app-openclash=y
        CONFIG_PACKAGE_luci-app-dockerman=y
        CONFIG_PACKAGE_luci-app-samba4=y
        CONFIG_PACKAGE_luci-app-ttyd=y
        CONFIG_PACKAGE_luci-app-frpc=y
        CONFIG_PACKAGE_luci-app-mosdns=y
        CONFIG_PACKAGE_luci-app-alist=y
        CONFIG_PACKAGE_luci-app-argon-config=y
        CONFIG_PACKAGE_luci-theme-argon=y
        # 保留 luci 基础 httpd
        CONFIG_PACKAGE_luci-app-uhttpd=y
        EOF

        # 保持不启用的项（避免重复或体积过大），按需可以开启
        cat >> .config <<EOF
        # 这些大型或重复的组件默认不启用（可按需打开）
        # CONFIG_PACKAGE_luci-app-vsftpd is not set
        # CONFIG_PACKAGE_luci-app-upnp is not set
        EOF

        # DDNS：参考 config.txt，默认不启用内置 ddns-scripts（若需要请手动开启）
        cat >> .config <<EOF
        # CONFIG_PACKAGE_luci-app-ddns is not set
        # CONFIG_PACKAGE_ddns-scripts is not set
        EOF

        # 必备与磁盘工具（保留以便 NAS/存储功能）
        cat >> .config <<EOF
        CONFIG_PACKAGE_perl=y
        CONFIG_PACKAGE_perl-http-date=y
        CONFIG_PACKAGE_perlbase-file=y
        CONFIG_PACKAGE_perlbase-getopt=y
        CONFIG_PACKAGE_perlbase-time=y
        CONFIG_PACKAGE_perlbase-unicode=y
        CONFIG_PACKAGE_perlbase-utf8=y
        CONFIG_PACKAGE_blkid=y
        CONFIG_PACKAGE_fdisk=y
        CONFIG_PACKAGE_lsblk=y
        CONFIG_PACKAGE_parted=y
        CONFIG_PACKAGE_attr=y
        CONFIG_PACKAGE_btrfs-progs=y
        CONFIG_BTRFS_PROGS_ZSTD=y
        CONFIG_PACKAGE_chattr=y
        CONFIG_PACKAGE_dosfstools=y
        CONFIG_PACKAGE_e2fsprogs=y
        CONFIG_PACKAGE_f2fs-tools=y
        CONFIG_PACKAGE_f2fsck=y
        CONFIG_PACKAGE_lsattr=y
        CONFIG_PACKAGE_mkf2fs=y
        CONFIG_PACKAGE_xfs-fsck=y
        CONFIG_PACKAGE_xfs-mkfs=y
        CONFIG_PACKAGE_bsdtar=y
        CONFIG_PACKAGE_pigz=y
        CONFIG_PACKAGE_bash=y
        CONFIG_PACKAGE_gawk=y
        CONFIG_PACKAGE_getopt=y
        CONFIG_PACKAGE_losetup=y
        CONFIG_PACKAGE_tar=y
        CONFIG_PACKAGE_uuidgen=y
        CONFIG_PACKAGE_ntfs3-mount=y
        CONFIG_PACKAGE_coreutils=y
        CONFIG_PACKAGE_coreutils-base64=y
        CONFIG_PACKAGE_coreutils-nohup=y
        CONFIG_PACKAGE_jq=y
        CONFIG_PACKAGE_pv=y
        EOF

        # 其它常用工具与服务（根据 config.txt）
        cat >> .config <<EOF
        CONFIG_PACKAGE_htop=y
        CONFIG_PACKAGE_iperf3=y
        CONFIG_PACKAGE_nano-plus=y
        CONFIG_PACKAGE_openssh-sftp-server=y
        CONFIG_PACKAGE_snmpd=y
        CONFIG_PACKAGE_vim-fuller=y
        CONFIG_PACKAGE_zsh=y
        EOF

        # 主题/UI 支持（保留 design/argon 可选）
        cat >> .config <<EOF
        CONFIG_PACKAGE_luci-theme-design=y
        CONFIG_PACKAGE_luci-app-design-config=y
        CONFIG_PACKAGE_luci-theme-netgear=y
        EOF

        # 清理行首空格并生成默认配置
        sed -i 's/^[ \t]*//g' ./.config
        make defconfig

    - name: Download package
      id: package
      run: |
        cd openwrt 
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        rm -rf $GITHUB_WORKSPACE/.git
        rm -rf $GITHUB_WORKSPACE/opt
        df -Th

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc)
        echo "status=success" >> ${GITHUB_OUTPUT}
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Compile debug
      if: ${{ failure() && steps.compile.conclusion == 'failure' }}
      run: |
        cd openwrt
        echo -e "1 thread compile debug"
        make -j1 V=s

    - name: Clean up server space
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        df -hT
        cd openwrt
        cp -f .config bin/config
        echo "开始清理空间"
        sudo rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
        df -hT

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf Packages.tar.gz ./*
        cp Packages.tar.gz $GITHUB_WORKSPACE/openwrt/bin
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Package Armvirt as OpenWrt
      if: steps.organize.outputs.status == 'success' && !cancelled()
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMSR: openwrt/bin/targets/*/*/*.tar.gz
        PACKAGE_SOC: s905d_s905x3
        KERNEL_VERSION_NAME: ${{ env.KERNEL_VER }}
        WHOAMI: Wing
        KERNEL_AUTO_LATEST: true
        KERNEL_REPO_URL: OldCoding/openwrt_packit_arm
        OPENWRT_VER: ${{ env.VER }}
        GZIP_IMGS: .gz
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#    - name: Package Armvirt as OpenWrt
#      if: steps.organize.outputs.status == 'success' && !cancelled()
#      uses: ophub/amlogic-s9xxx-openwrt@main
#      with:
#        openwrt_path: openwrt/bin/targets/*/*/*.tar.gz
#        kernel_usage: flippy
#        openwrt_board: s905x3_s905d
#        openwrt_kernel: 6.1.y_6.6.y
#        auto_kernel: true
#        builder_name: Wing

    - name: Calculate MD5
      run: |
        cp $GITHUB_WORKSPACE/openwrt/bin/Packages.tar.gz ${{ env.PACKAGED_OUTPUTPATH }}
        #cp $GITHUB_WORKSPACE/openwrt/bin/targets/*/*/*rootfs.tar.gz ${{ env.PACKAGED_OUTPUTPATH }}
        cp $GITHUB_WORKSPACE/openwrt/bin/config ${{ env.PACKAGED_OUTPUTPATH }}/config-immo.txt
        cd ${{ env.PACKAGED_OUTPUTPATH }} && rm -rf sha256sums
        MD5=$(md5sum *.gz | sed ':a;N;$!ba;s/\n/<br>/g')
        echo "MD5=$MD5" >> $GITHUB_ENV

    - name: Upload artifact to Actions
      uses: kittaakos/upload-artifact-as-is@master
      if: env.PACKAGED_STATUS == 'success' && env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      with:
        path: ${{ env.PACKAGED_OUTPUTPATH }}/

    - name: Upload OpenWrt Firmware to Release
      id: release
      uses: ncipollo/release-action@main
      if: env.PACKAGED_STATUS == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        name: R${{ env.DATE }} for ${{ env.PRODUCT_NAME }}
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.PRODUCT_NAME }}
        commit: main
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        body: |
          - 版本号：${{ env.VER }}
          - 默认IP：192.168.50.200
          - 默认密码：password
          - 当前使用版本:【编译前的最后一次[➦主源码](${{ env.REPO_URL }})更新记录】
          - 固件请使用晶晨宝盒刷入
          ${{ env.useVersionInfo }}
          - 下载后请仔细校验MD5，如不正确请重新下载
          `md5sum`
          > ${{ env.MD5 }}

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 60
        keep_minimum_runs: 60

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        repo: OldCoding/openwrt_packit_arm
        keep_latest: 30
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
